rgb


# capture.py
import numpy as np
import cv2

# Capture video from camera
# cap = cv2.VideoCapture(0)

# Capture video from file
cap = cv2.VideoCapture('BlueUmbrella.webm')

while(cap.isOpened()):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Our operations on the frame come here
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Display the resulting frame
    cv2.imshow('frame',gray)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# When everything done, release the capture
cap.release()

cv2.destroyAllWindows()

	



###############################

#!/usr/bin/env python
# capture.py
import numpy as np
import cv2
import rospy
import sys
import roslib
from std_msgs.msg import String 
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError



class afisare:
	
	def __init__(self):
		
		self.bridge = CvBridge()
		self.cap = cv2.VideoCapture(0)
		self.cap2 = rospy.Subscriber("/optris/image_color",Image,self.callback)

	def ruleaza(self):
		
		while(cap.isOpened()):
			ret, frame = self.cap.read()
			ret2, frame2 = self.cap2.read()

			gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
			gray2 = cv2.cvtColor(frame2, cv2.COLOR_BGR2GRAY)

			cv2.imshow('frame',gray)
			cv2.imshow('frame2',gray2)
			
			if cv2.waitKey(1) & 0xFF == ord('q'):
				break
	
		self.cap.release()
		self.cap2.release()

		cv2.destroyAllWindows()

	def callback(self,data):
		try:
			cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
		except CvBridgeError as e:
			print(e)
    	#cv2.imshow("Gray", cv_image)
    	#cv2.waitKey(3)


def main(args):
	ic=afisare()
	rospy.init_node('afisare', anonymous = True)

	try:
		rospy.spin()
	except KeyboardInterrupt:
		print "Shut Down"
	cv2.destroyAllWindows()


if __name__ == '__main__':
	main(sys.argv)

